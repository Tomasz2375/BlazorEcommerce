@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService

@if (product is null)
{
    <span>@message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
        </div>
        <div class="media-body">
            <h2 class="mb-0">@product.Title</h2>
            <p>@product.Description</p>
            @if (product.Variants is not null && product.Variants.Count > 1)
            {
                <div class="mb-3">
                    <select class="form-sellect" @bind="currentTypeId">
                        @foreach (var variant in product.Variants)
                        {
                            <option value="@variant.ProductTypeId">
                                @variant.ProductType.Name
                            </option>
                        }
                    </select>
                </div>
            }
            @if (getSelectedVariant() is not null)
            {
                @if (getSelectedVariant().OriginalPrice > getSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        $@getSelectedVariant().OriginalPrice
                    </h6>
                }
                <h4 class="price">
                    $@getSelectedVariant().Price
                </h4>
            }
            <button class="btn btn-primary" @onclick="addToCart">
                <i class="oi oi-cart" /> &nbsp;&nbsp;&nbsp;Add to Cart
            </button>
        </div>
    </div>
}

@code {
    private Product? product = null;
    private string message = string.Empty;
    private int currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        message = "Loading product...";

        var result = await ProductService.GetProduct(Id);
        if (!result.Sucess)
        {
            message = result.Message;
        }
        else
        {
            product = result.Data;
            if (product!.Variants.Count > 0)
            {
                currentTypeId = product.Variants[0].ProductTypeId;
            }
        }
    }
    private ProductVariant getSelectedVariant()
    {
        var variant = product!
        .Variants
        .FirstOrDefault(x => x.ProductTypeId == currentTypeId);

        return variant!;
    }

    private async Task addToCart()
    {
        var productVariant = getSelectedVariant();
        var cartItem = new CartItem()
        {
            ProductId = productVariant.ProductId,
            ProductTypeId = productVariant.ProductTypeId,
        };

        await CartService.AddToCart(cartItem);
    }
}
